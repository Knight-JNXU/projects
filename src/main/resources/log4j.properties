#配置根logger
log4j.rootLogger=info, console, log, error

###Console ###
log4j.appender.console = org.apache.log4j.ConsoleAppender
log4j.appender.console.Target = System.out
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern = %d %p[%C:%L]- %m%n

### log ###
log4j.appender.log = org.apache.log4j.DailyRollingFileAppender
#日志文件输出位置
log4j.appender.log.File = ${catalina.base}/logs/debug.log
#是否添加文件
log4j.appender.log.Append = true
#日志输出级别
log4j.appender.log.Threshold = DEBUG
#日志生成周期
log4j.appender.log.DatePattern='.'yyyy-MM-dd
#日志输出格式
log4j.appender.log.layout = org.apache.log4j.PatternLayout
# 设置日志输出格式
# %p 输出日志优先级，即 DEBUG、INFO、WARN、ERROR、FATAL
# %d 输出日志时间点的日期或时间
# %c 输出日志信息所属的类目，通常就是所在类的全名
# %t 输出日志事件的线程名
# %l 输出日志事件的发生位置
# %x 输出和当前线程相关联的NDC(嵌套诊断环境)，尤其是用到想 java servlet这样的多客户线程的应用中
# %% 输出一个 “%” 字符，相当于 % 的转义
# %F 输出日志消息产生时所在的文件名称
# %L 输出代码中的行号
# %m 输出代码中指定的消息，产生的日志具体信息
# %n 输出一个回车换行符
# 可以在 “%” 与 模式字符 之间加上修饰符来控制其最小宽度、最大宽度、和文本的对其方式。如：
# %20c 指定输出 category 的名称，最小宽度为 20，如果 category 小于20的话，默认情况下右对齐
# %-20c 指定输出 category 的名称，最小宽度是 20，如果 category 小于20的话，“-” 指定为左对齐
# %.30c 指定输出 category 的名称，最大宽度是 30， 如果 category 大于30，会将左边多出的字符截掉，但小于30也不会有空格
# %20.30c 如果 category 的名称小于20就补空格，并且右对齐，如果其名称长于30，会将左边多出的字符截掉
log4j.appender.log.layout.ConversionPattern = %d %p[%c:%L] - %m%n


### Error ###
log4j.appender.error = org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.File = ${catalina.base}/logs/error.log
log4j.appender.error.Append = true
log4j.appender.error.Threshold = ERROR 
log4j.appender.error.DatePattern='.'yyyy-MM-dd
log4j.appender.error.layout = org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern =%d %p[%c:%L] - %m%n
